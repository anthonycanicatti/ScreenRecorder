/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package screenrecorder;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Anthony
 */
public class RecorderSimple extends javax.swing.JFrame {

    RecorderSimple myself = this;
    String outputDir = null;
    boolean onCompleteShowFile = true;
    
    /**
     * Creates new form NewRecorderFrame
     */
    public RecorderSimple() {
        initComponents();
        
        JFileChooser fc = new JFileChooser();
        FileSystemView fw = fc.getFileSystemView();
        outputDir = fw.getDefaultDirectory().getAbsolutePath()+"\\ScreenRecord.mov";
        fileField.setText(outputDir);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        screenButton = new javax.swing.JButton();
        outLabel = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        onCompleteCheck = new javax.swing.JCheckBox();
        changeOutputButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Screen Recorder");
        setResizable(false);

        recButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/screenrecorder/res/start.png"))); // NOI18N
        recButton.setFocusPainted(false);
        recButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/screenrecorder/res/stop.png"))); // NOI18N
        stopButton.setFocusPainted(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        screenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/screenrecorder/res/cam.png"))); // NOI18N
        screenButton.setFocusPainted(false);
        screenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenButtonActionPerformed(evt);
            }
        });

        outLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        outLabel.setText("Output File:");
        outLabel.setEnabled(false);

        fileField.setEnabled(false);

        statusLabel.setText("Status: Ready");

        onCompleteCheck.setSelected(true);
        onCompleteCheck.setText("Select file upon completion");
        onCompleteCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCompleteCheckActionPerformed(evt);
            }
        });

        changeOutputButton.setText("Change");
        changeOutputButton.setEnabled(false);
        changeOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeOutputButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(recButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(screenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(outLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onCompleteCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(changeOutputButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(screenButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(onCompleteCheck)
                    .addComponent(changeOutputButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeOutputButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retVal = chooser.showDialog(this, "Select Directory");
        if(retVal == JFileChooser.APPROVE_OPTION){
            outputDir = chooser.getSelectedFile().getAbsolutePath()+"\\ScreenRecord.mov";
            fileField.setText(outputDir);
        }
    }//GEN-LAST:event_changeOutputButtonActionPerformed

    private void recButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recButtonActionPerformed
        // TODO add your handling code here:
        changeOutputButton.setEnabled(false);
        recButton.setEnabled(false);
        stopButton.setEnabled(true);
        statusLabel.setText("Preparing to record...");
        Recorder.startRecording();
        statusLabel.setText("Recording...");
    }//GEN-LAST:event_recButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        Recorder.stopRecording();
        statusLabel.setText("Creating output file...");
        if(onCompleteShowFile){
            JFileChooser chooser = new JFileChooser();
            File f = new File(outputDir);
            chooser.setSelectedFile(f);
            int retVal = chooser.showSaveDialog(this);
            if(retVal == JFileChooser.APPROVE_OPTION){
                outputDir = chooser.getSelectedFile().getAbsolutePath();
            }
        }
        int created = Recorder.createFile("file:"+outputDir);
        if(created > 1)
            statusLabel.setText("Unable to create output file.");
        else
            statusLabel.setText("Output file created!");
        changeOutputButton.setEnabled(true);
        recButton.setEnabled(true);
        stopButton.setEnabled(false);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void onCompleteCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCompleteCheckActionPerformed
        // TODO add your handling code here:
        onCompleteShowFile = onCompleteCheck.isSelected();
        outLabel.setEnabled(!onCompleteShowFile);
        changeOutputButton.setEnabled(!onCompleteShowFile);
        fileField.setEnabled(!onCompleteShowFile);
    }//GEN-LAST:event_onCompleteCheckActionPerformed

    private void screenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int retVal = chooser.showSaveDialog(this);
        if(retVal == JFileChooser.APPROVE_OPTION){
            chooser.setVisible(false);
            Recorder.takeScreenshot(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_screenButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecorderSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecorderSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecorderSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecorderSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecorderSimple().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeOutputButton;
    private javax.swing.JTextField fileField;
    private javax.swing.JCheckBox onCompleteCheck;
    private javax.swing.JLabel outLabel;
    private javax.swing.JButton recButton;
    private javax.swing.JButton screenButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
